// Generated by CoffeeScript 1.6.2
(function() {
  var authorize, base, cleanup, connect, disconnect, filter, github, global, setDefault, setSuggestions, suggestActions, suggestMyRepos, suggestTheirRepos, tools, travisBase, user;

  base = "https://github.com/";

  travisBase = "https://travis-ci.org/";

  github = user = null;

  global = {
    repos: [],
    users: [],
    issues: [],
    orgs: [],
    theirRepos: []
  };

  cleanup = function() {
    return global.theirRepos = [];
  };

  authorize = function() {
    localStorage.username = prompt("Please enter your Github username:");
    localStorage.password = prompt("Please enter your Github password:");
    return alert('You can deauthorize at any time by entering "gh deauthorize" into the address bar');
  };

  connect = function() {
    if (!localStorage.username || !localStorage.password) {
      return;
    }
    github = new Github({
      username: localStorage.username,
      password: localStorage.password,
      auth: "basic"
    });
    user = github.getUser();
    user.repos(function(err, repos) {
      return Array.prototype.push.apply(global.repos, repos);
    });
    return user.orgs(function(err, orgs) {
      global.orgs = orgs;
      return _(global.orgs).each(function(org) {
        return user.orgRepos(org.login, function(err, repos) {
          return Array.prototype.push.apply(global.repos, repos);
        });
      });
    });
  };

  disconnect = function() {
    localStorage.username = null;
    localStorage.password = null;
    github = null;
    user = null;
    global.repos = [];
    global.orgs = [];
    return alert('Done. You can reauthorize at any time by entering "gh authorize" into the address bar');
  };

  setDefault = function(text, suggest) {
    var action, description, type;

    type = void 0;
    action = void 0;
    description = "Go to ";
    if (text[0] === "/" && github) {
      suggestMyRepos(text, suggest);
    } else if (type = tools.isUrl(text)) {
      description = "Go to";
    } else if (type = tools.user(text)) {
      description += "user";
    } else if (text.match(/(^[\w-]+\/$)/)) {
      suggestTheirRepos(text, suggest);
    } else if (type = text.match(/(^[\w-]+\/[\w-\.]+\s+)/)) {
      suggestActions(text, suggest);
      if (type[2] && (action = tools.repoAction(type[2]))) {
        if (action[2]) {
          description += "repo issue";
        } else if (action[3]) {
          description += "repo branch";
        } else {
          if (action[1] === "travis") {
            description += action[1];
          } else {
            description += "repo " + action[1];
          }
        }
      } else {
        description += "repo";
      }
    } else if (type = tools.io(text)) {
      description += "page";
    } else {
      description = "Search for";
    }
    return chrome.omnibox.setDefaultSuggestion({
      description: description + ": %s"
    });
  };

  setSuggestions = function(text, suggest) {
    return suggest([
      {
        content: text + " one",
        description: "the first one"
      }, {
        content: text + " number two",
        description: "the second entry"
      }
    ]);
  };

  suggestMyRepos = function(text, suggest) {
    var suggestions;

    suggestions = [];
    _(filter({
      name: text.substr(1)
    }, global.repos)).each(function(repo) {
      return suggestions.push({
        description: repo.full_name,
        content: repo.full_name
      });
    });
    return suggest(suggestions);
  };

  suggestTheirRepos = function(text, suggest) {
    var suggestions, textSplit;

    suggestions = [];
    textSplit = text.split('/');
    if (textSplit.length === 1) {
      return;
    }
    if (!global.theirRepos.length) {
      user.userRepos(textSplit[0], function(err, repos) {
        global.theirRepos = repos;
        if (repos.length) {
          return suggestTheirRepos(text, suggest);
        }
      });
    }
    _(filter({
      name: textSplit[0]
    }, global.theirRepos)).each(function(repo) {
      return suggestions.push({
        description: repo.full_name,
        content: repo.full_name
      });
    });
    return suggest(suggestions);
  };

  suggestActions = function(text, suggest) {
    var actions, content, description, i, suggestions;

    suggestions = [];
    description = "Go to ";
    content = base + text + "/";
    actions = ["pulse", "wiki", "pulls", "graphs", "network", "issues", "admin", "travis"];
    text = text.split(" ");
    actions = filter(text[1], actions);
    i = actions.length - 1;
    while (i >= 0) {
      suggestions.push({
        description: description + actions[i] + ": " + text[0],
        content: text[0] + " " + actions[i]
      });
      i--;
    }
    suggestions.push({
      description: "New pull: " + text[0],
      content: text[0] + " issues/new"
    });
    suggestions.push({
      description: "New issue: " + text[0],
      content: text[0] + " pulls/new"
    });
    return suggest(suggestions);
  };

  filter = function(text, data, looseMatch) {
    var results;

    if (!text) {
      return data;
    }
    results = [];
    _.each(data, function(item) {
      var key, match;

      match = void 0;
      key = void 0;
      if (_.isObject(text)) {
        key = _(text).keys()[0];
        match = item[key].toLowerCase().indexOf(text[key].toLowerCase());
      } else {
        match = item.toLowerCase().indexOf(text.toLowerCase());
      }
      if (looseMatch && ~match || !match) {
        return results.push(item);
      }
    });
    return results;
  };

  tools = {
    http: function(url) {
      var xmlHttp;

      xmlHttp = null;
      xmlHttp = new XMLHttpRequest();
      xmlHttp.open("GET", url, false);
      xmlHttp.send(null);
      return xmlHttp.responseText;
    },
    navigate: function(url, fullPath) {
      if (!fullPath) {
        url = base + url;
      }
      return chrome.tabs.getSelected(null, function(tab) {
        return chrome.tabs.update(tab.id, {
          url: url
        });
      });
    },
    user: function(text) {
      return text.match(/@([\w-]+)/);
    },
    repo: function(text) {
      return text.match(/([\w-]+\/[\w-\.]+)(\s+.+)?/);
    },
    repoAction: function(text) {
      return text.match(/(pulse|wiki|pulls|graphs|network|issues|admin|travis|new pull|new issue|#([0-9]+)|@([\w-]+))/);
    },
    isUrl: function(text) {
      return text.match(/http[s]?:.*/);
    },
    io: function(text) {
      return text.match(/([\w-]+)\.(gh|github)\.(io|com)(\/[\w-]+)?/);
    },
    ioUrl: function(io) {
      var url;

      url = void 0;
      url = "http://" + io[1] + ".github.io";
      if (io[4]) {
        url += io[4];
      }
      return url;
    },
    searchUrl: function(text) {
      return "search?q=" + text;
    }
  };

  chrome.omnibox.onInputChanged.addListener(function(text, suggest) {
    return setDefault(text, suggest);
  });

  chrome.omnibox.onInputEntered.addListener(function(text) {
    var action, type;

    cleanup();
    type = void 0;
    action = void 0;
    if (text === "authorize") {
      authorize();
      return connect();
    } else if (text === "deauthorize") {
      return disconnect();
    } else if (text[0] === "/" && localStorage.username) {
      return tools.navigate(localStorage.username + text);
    } else if (type = tools.isUrl(text)) {
      return tools.navigate(text);
    } else if (type = tools.user(text)) {
      return tools.navigate(type[1]);
    } else if (type = tools.repo(text)) {
      console.log(type);
      if (type[2] && (action = tools.repoAction(type[2]))) {
        if (action[2]) {
          return tools.navigate(type[1] + "/issues/" + action[2]);
        } else if (action[3]) {
          return tools.navigate(type[1] + "/tree/" + action[3]);
        } else {
          if (action[1] === "travis") {
            return tools.navigate(travisBase + type[1], true);
          } else {
            return tools.navigate(type[1] + "/" + action[1]);
          }
        }
      } else {
        return tools.navigate(type[1]);
      }
    } else if (type = tools.io(text)) {
      return tools.navigate(tools.ioUrl(type), true);
    } else {
      return tools.navigate(tools.searchUrl(text));
    }
  });

  chrome.omnibox.onInputCancelled.addListener(function() {
    return cleanup();
  });

  if (!localStorage.authorized) {
    if (confirm('Would you like to Authorize Github-Omnibox for personalized suggestions?')) {
      authorize();
    } else {
      alert('You can authorize at any time by entering "gh authorize" into the address bar');
    }
    localStorage.authorized = true;
  }

  connect();

}).call(this);
